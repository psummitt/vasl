name: Build and Release

on:
  push:
    branches:
      - production
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Java environment
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Build the project
      - name: Build with Maven
        run: mvn clean package

      # Step 4: Upload .vmod file artifact
      - name: Upload .vmod file artifact
        uses: actions/upload-artifact@v3
        with:
          name: vmod-file
          path: target/*.vmod

  create-release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Get version dynamically from pom.xml
      - name: Get version from pom.xml
        id: get_version
        run: |
          VERSION=$(grep -oP '(?<=<version>)[^<]+' pom.xml | head -n 1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        env:
          GITHUB_ENV: $GITHUB_ENV

      - name: Read release notes
        id: read_release_notes
        run: |
          NOTES_FILE="dist/Whats New VASL ${VERSION}.txt"
          if [[ -f "$NOTES_FILE" ]]; then
            RELEASE_NOTES=$(cat "$NOTES_FILE")
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "Error: $NOTES_FILE not found."
            exit 1
          fi
        env:
          VERSION: ${{ env.VERSION }}

      # Step 4: Download .vmod file artifact
      - name: Download .vmod file artifact
        uses: actions/download-artifact@v3
        with:
          name: vmod-file

      # Step 5: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          draft: true
          prerelease: false

      # Step 6: Upload build artifacts (.vmod)
      - name: Upload .vmod file to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/*.vmod
          asset_name: $(basename ./target/*.vmod)
          asset_content_type: application/octet-stream

#      - name: Upload target directory as zip
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./target.zip
#          asset_name: target.zip
#          asset_content_type: application/zip
#
#      - name: Upload target directory as tar.gz
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./target.tar.gz
#          asset_name: target.tar.gz
#          asset_content_type: application/gzip
