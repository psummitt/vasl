name: Build and Release

on:
  push:
    branches:
      - production
  workflow_dispatch:

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Java environment
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            ${{ runner.os }}-


      # Step 4: Build the project
      - name: Build with Maven
        run: mvn clean package

      # Step 5: Debug target directory
      - name: List target directory contents
        run: ls -al ./target
        continue-on-error: true

      # Step 6: Upload .vmod file artifact
      - name: Upload .vmod file artifact
        uses: actions/upload-artifact@v4
        with:
          name: vmod-file
          path: target/*.vmod

  create-release:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Get version dynamically from pom.xml
      - name: Get version from pom.xml
        id: get_version
        run: |
          VERSION=$(grep -oP '(?<=<version>)[^<]+' pom.xml | head -n 1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        env:
          GITHUB_ENV: $GITHUB_ENV

      # Step 3: Read release notes
      - name: Read release notes
        id: read_release_notes
        run: |
          NOTES_FILE="dist/Whats New VASL ${VERSION}.txt"
          if [[ -f "$NOTES_FILE" ]]; then
            RELEASE_NOTES=$(cat "$NOTES_FILE")
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "Error: $NOTES_FILE not found."
            exit 1
          fi
        env:
          VERSION: ${{ env.VERSION }}

      # Step 4: Download .vmod file artifact
      - name: Download .vmod file artifact
        uses: actions/download-artifact@v4
        with:
          name: vmod-file
          path: ./target  # Specify the target directory

      # Step 5: Verify .vmod file exists
      - name: Verify and extract file name
        run: |
          VMOD_FILE=$(find ./target -name '*.vmod' -print -quit)
          if [[ -z "$VMOD_FILE" ]]; then
            echo "Error: No .vmod file found in ./target directory"
            exit 1
          fi
          FILE_NAME=$(basename "$VMOD_FILE")
          echo "VMOD_FILE=$VMOD_FILE" >> $GITHUB_ENV
          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_ENV
          echo "Found .vmod file: $VMOD_FILE with name: $FILE_NAME"

      # Step 6: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          draft: true
          prerelease: false

      # Step 7: Upload build artifacts (.vmod)
      - name: Upload .vmod file to release
        id: upload_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.VMOD_FILE }}  # Full file path
          asset_name: ${{ env.FILE_NAME }}  # File name only
          asset_content_type: application/octet-stream

      - name: Save download link
        run: |
          echo "DOWNLOAD_LINK=${{ steps.upload_asset.outputs.browser_download_url }}" >> $GITHUB_ENV

#      - name: Upload target directory as zip
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./target.zip
#          asset_name: target.zip
#          asset_content_type: application/zip
#
#      - name: Upload target directory as tar.gz
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./target.tar.gz
#          asset_name: target.tar.gz
#          asset_content_type: application/gzip


  update-website:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout website repository
        uses: actions/checkout@v4
        with:
          repository: vasl-developers/vasl-website
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: gh-pages

      - name: Update download.htm
        run: |
          VERSION=$(grep -oP '(?<=<version>)[^<]+' pom.xml | head -n 1)
          UPDATED_DATE=$(date '+%B %d, %Y')
          RELEASE_NOTES=$(cat "dist/release-notes.md")
          NEW_DIV="<div class='well table'>
          <a id='download${VERSION//./}' class='track btn btn-large btn-primary' href='${{ env.DOWNLOAD_LINK }}'>VASL ${VERSION}</a>
          <h2 class='pull-right'>Updated ${UPDATED_DATE}</h2>
          <li>${RELEASE_NOTES}</li>
          </div>"

          sed -i "/<div class='well table'>/h; \$!b; x; s@</div>@${NEW_DIV}</div>@; x; P; D" download.htm
          

      - name: Wait for manual approval
        if: always()
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: manual-approval

      # Step 5: Commit and push changes
      - name: Commit and push changes (after approval)
        if: ${{ github.event.inputs.approval == 'approved' }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add download.htm
          git commit -m "Update download.htm with VASL ${VERSION}"
          git push origin gh-pages

